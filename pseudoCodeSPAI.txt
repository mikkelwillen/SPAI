Pseudocode for the SPAI algorithm
A = A sparse input matrix
M = sparsity matrix (set to diagonal, if no prior info is available)
epsilon = tolerance (give as input to function, so user can choose)
max_iter = constraint for the maximal number of iterations (give as input)
s = number of rho_j - the most profitable indices


For every column m_k of M
1) Find initial sparsity J of m_k
2) Compute the row indices I of the corresponding nonzero entries of A(i, J)
3) Create AHat = A(I, J)
4) Do QR decomposition of AHat
5) Compute the solution m_k for the least sqaures problem
    5.1) Compute cHat = Q^T * eHat_k
    5.2) Compute the inverse of R
	5.3) Compute mHat_k = R^-1 * cHat
6) Compute residual

while residual > tolerance:
	7) Set L set of indices, where r(l) =/= 0 (can be restricted to some number of largest elements in r)
	8) Set JTilde to all new column indices of A that appear in all L rows, but is not in J yet
	9) For each j in JTilde solve the minimisation problem by computing:
		rho^2_j = ||r_new||^2 - (r^T A e_j)^2 / ||A e_j||^2
	10) Find the indices JTilde corresponding to the smallest s elements of rho^2
	11) Determine the new indices I-rond_tilde
	12) Make I U ITilde and J U JTilde
	13) Update the QR decomposition
		13.1) Create A(I, JTilde) and A(ITilde, JTilde)
		13.2) Compute ABreve = Q^T * A(I, JTilde)
		13.3) Compute B1 = ABreve(0 : n2, 0 : n2)
		13.4) Compute B2 = ABreve(n2 + 1 : n1, 0 : n2Tilde) above AITildeJTilde
		13.5) Do QR decomposition of B2
		13.6) Compute Q_B and R_B from algorithm 17
		13.7) Solve the augmented LS problem for mHat_k and compute new residual
    14) Compute residual 
    15) set I = I U I_tilde, J = J U J_tilde and A' = A(I, J)

16) Set m_k(J) = mHat_k
